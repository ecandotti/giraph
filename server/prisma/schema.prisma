datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model Member {
  id        Int            @id @default(autoincrement())
  role      Role           @default(GUEST)
  email     String         @unique
  password  String
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
  profile   MemberProfile?

  @@map("member")
}

model MemberProfile {
  id           Int          @id @default(autoincrement())
  acceptCGU    Boolean      @default(false)
  status       MemberStatus @default(CONFIRM_MAIL)
  email        String       @unique
  emailConfirm Boolean      @default(false)
  firstName    String?
  lastName     String?
  imgURL       String?                   
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())
  member       Member       @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId     Int          @unique
  projects     Project[]
  tickets      Ticket[]

  @@map("member_profile")
}

model Project {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  ownerId      Int
  members      MemberProfile[]
  sprints      Sprint[]
  tickets      Ticket[]
  updatedAt    DateTime         @updatedAt
  createdAt    DateTime         @default(now())

  @@map("project")
}

model Sprint {
  id           Int          @id @default(autoincrement())
  project      Project      @relation(fields: [projectId], references: [id])
  projectId    Int          @unique
  tickets      Ticket[]
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())

  @@map("sprint")
}

model Ticket {
  id                Int            @id @default(autoincrement())
  status            TicketStatus   @default(NEW)
  flag              Flag?
  title             String
  description       String
  project           Project         @relation(fields: [projectId], references: [id])
  projectId         Int
  sprint            Sprint          @relation(fields: [sprintId], references: [id])
  sprintId          Int
  memberProfile     MemberProfile?  @relation(fields: [memberProfileId], references: [id])
  memberProfileId   Int?
  updatedAt         DateTime        @updatedAt
  createdAt         DateTime        @default(now())

  @@map("ticket")
}

model Flag {
  id                Int            @id @default(autoincrement())
  title             String
  description       String
  ticket            Ticket?        @relation(fields: [ticketId], references: [id])
  ticketId          Int?           @unique
  updatedAt         DateTime       @updatedAt
  createdAt         DateTime       @default(now())

  @@map("flag")
}

enum Role {
  SCRUM_MASTER
  DEVELOPER
  GUEST
}

enum MemberStatus {
  CONFIRM_MAIL
  VALID
}

enum TicketStatus {
  NEW
  IN_PROGRESS
  PENDING_REVIEW
  REJECTED
  ENDED
}
